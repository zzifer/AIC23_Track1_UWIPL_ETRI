import numpy as np

HOMO = {
    "S001": {
        "c001": np.array([[15.960967714648925, 12.641103934504969, -10836.136331862522638],
                          [-1.835398974840282, -0.998891694233460, 4826.729634388938393],
                          [0.013774024811562, -0.002497116217865, 1.000000000000000]]
                         ),
        "c002": np.array([[-0.628920333901022, -0.673555584190189, 1473.839466185914716],
                          [-0.096960410483471, 0.004922152346833, 278.717518025134211],
                          [-0.000654408791021, 0.000014246203621, 1.000000000000000]]
                         ),
        "c003": np.array([[1.132612766338583, -1.249409736401115, 755.138327271220533],
                          [-0.051440234818577, 0.161158422060954, 144.769179956926592],
                          [-0.000074135681712, -0.001257982454645, 1.000000000000000]]
                         ),
        "c004": np.array([[-10.039698157669710, -11.357587039419048, 2849.310961565047819],
                          [-1.760443892583207, 0.562101180692419, -2312.776840338349302],
                          [-0.011024040905084, 0.000566745328035, 1.000000000000000]]
                         ),
        "c005": np.array([[8.638771675710249, -13.831837080777767, -1312.458431886777362],
                          [-1.745211944767842, -1.641003052056383, -2113.002590146511466],
                          [-0.004730853927711, -0.013509625930769, 1.000000000000000]]
                         ),
        "c006": np.array([[-34.444912595614113, 30.055406684386313, 16466.787882406610152],
                          [-1.014609579389066, -2.130436599153355, 7602.048264858818584],
                          [-0.001055060502573, 0.032001140128679, 1.000000000000000]]
                         ),
        "c007": np.array([[1.699658504718583, -0.779773743762950, 186.005807766818037],
                          [0.087093078029455, 0.228593278757039, 77.925499504829929],
                          [0.000295046741868, -0.000942530317064, 1.000000000000000]]
                         )
    }
}


# 用于将二维图像坐标转换为三维世界坐标
# 接收二维坐标n2d和单应矩阵h作为参数
def image2world(n2d, h):
    # n2d = [x_2d, y_2d]
    # 将二维坐标转换为齐次坐标（在二维坐标后添加1），并转换为numpy数组
    n2d = np.array(n2d + [1.0])
    # n2d = [x_2d, y_2d, 1]
    # 使用单应矩阵h的逆矩阵将齐次坐标从图像空间转换到三维世界空间
    n3d = np.dot(np.linalg.inv(h), n2d.T)
    # n3d = [x_3d, y_3d, z_3d]
    # ground-plane should be normalized by z-axis
    #  将三维坐标正规化（除以z坐标），以得到二维世界坐标
    return n3d[0] / n3d[2], n3d[1] / n3d[2]

# 三维世界坐标转换为二维图像坐标
# 接收三维坐标n3d和单应矩阵h作为参数
def world2image(n3d, h):
    # 将三维坐标转换为齐次坐标（在三维坐标后添加1），并转换为numpy数组
    n3d = np.array(n3d + [1.0])
    #  使用单应矩阵h将三维世界坐标转换为二维图像坐标
    n2d = np.dot(h, n3d)
    # image space should also be normalized by z-axis
    # 将得到的二维坐标正规化（除以z坐标），得到二维图像空间的坐标
    return n2d[0] / n2d[2], n2d[1] / n2d[2]
